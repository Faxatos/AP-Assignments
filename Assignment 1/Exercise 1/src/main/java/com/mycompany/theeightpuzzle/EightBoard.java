package com.mycompany.theeightpuzzle;

import java.beans.PropertyChangeSupport;
import java.beans.VetoableChangeSupport;
import java.beans.PropertyVetoException;

import java.util.Collections;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Represents the graphical user interface for the Eight Puzzle game.
 * 
 * This class extends JFrame and manages the display of the game board. 
 * It initializes and manages the {@link EightTile} instances for each tile and uses 
 * {@link EightController} to check the validity of the moves. 
 * The board includes controls for starting a new game ("Restart") and flipping the board ("Flip").
 * 
 * @author Faxy
 */
public class EightBoard extends javax.swing.JFrame {
    // Array containing the tiles
    private final EightTile[] tiles;
    
    // Support for bound and constrained properties
    private final PropertyChangeSupport pcs;
    private final VetoableChangeSupport vcs;
    
    /**
     * Creates a new EightBoard instance.
     * 
     * Initializes the components, sets up tile references, registers listeners,
     * and configures the board with a random tile arrangement.
     */
    public EightBoard() {
        this.pcs = new PropertyChangeSupport(this);
        this.vcs = new VetoableChangeSupport(this);
        
        // Initialize the components
        initComponents();
        
        // Initialize the tiles array
        this.tiles = new EightTile[9];
        this.tiles[0] = eightTile1;
        this.tiles[1] = eightTile2;
        this.tiles[2] = eightTile3;
        this.tiles[3] = eightTile4;
        this.tiles[4] = eightTile5;
        this.tiles[5] = eightTile6;
        this.tiles[6] = eightTile7;
        this.tiles[7] = eightTile8;
        this.tiles[8] = eightTile9;
        
        for (EightTile tile : tiles) {
            tile.addVetoableChangeListener(eightController1); // Register controller as VetoableChangeListener for move vetos
            this.pcs.addPropertyChangeListener(tile); // Register tiles as listeners to the Restart and Flip event
        }
        
        // Register controller as VetoableChangeListener for Flip vetos
        this.vcs.addVetoableChangeListener(eightController1);
        
        // Register controller as listener to the Restart event
        this.pcs.addPropertyChangeListener(eightController1);
        
        // Set PropertyChangeListener for adjacent tiles
        setAdjacencies();
        
        // Initialize the board with a random configuration
        initializeBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        eightTile1 = new com.mycompany.theeightpuzzle.EightTile(1, 0);
        eightTile2 = new com.mycompany.theeightpuzzle.EightTile(2, 0);
        eightTile3 = new com.mycompany.theeightpuzzle.EightTile(3, 3);
        eightTile4 = new com.mycompany.theeightpuzzle.EightTile(4, 0);
        eightTile5 = new com.mycompany.theeightpuzzle.EightTile(5, 0);
        eightTile6 = new com.mycompany.theeightpuzzle.EightTile(6, 0);
        eightTile7 = new com.mycompany.theeightpuzzle.EightTile(7, 7);
        eightTile8 = new com.mycompany.theeightpuzzle.EightTile(8, 8);
        eightTile9 = new com.mycompany.theeightpuzzle.EightTile(9, 9);
        eightController1 = new com.mycompany.theeightpuzzle.EightController();
        Restart = new javax.swing.JButton();
        Flip = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The 8 puzzle");

        eightTile1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile1.setText("");
        eightTile1.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        eightTile1.setLabel("1");

        eightTile2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile2.setText("");
        eightTile2.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        eightTile2.setLabel("2");

        eightTile3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile3.setText("");
        eightTile3.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        eightTile3.setLabel("3");

        eightTile4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile4.setText("");
        eightTile4.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        eightTile4.setLabel("4");

        eightTile5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile5.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        eightTile5.setLabel("");

        eightTile6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile6.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N

        eightTile7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile7.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N

        eightTile8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile8.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N

        eightTile9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 2, true));
        eightTile9.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N

        eightController1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        eightController1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        Restart.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Restart.setText("RESTART");
        Restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartActionPerformed(evt);
            }
        });

        Flip.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Flip.setText("FLIP");
        Flip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eightTile1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eightTile2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(eightTile3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eightController1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Flip, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eightTile4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eightTile5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eightTile9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eightTile6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eightTile7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eightTile8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(120, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eightTile2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eightTile6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eightTile8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightTile9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(Flip, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightController1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }//GEN-END:initComponents

    private void RestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartActionPerformed
        initializeBoard();
    }//GEN-LAST:event_RestartActionPerformed

    private void FlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlipActionPerformed
        flipBoard();
    }//GEN-LAST:event_FlipActionPerformed

    /**
     * Main method to launch the EightBoard application.
     * 
     * @param args Command line arguments.
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EightBoard().setVisible(true);
        });
    }
    
    /**
     * Initializes the board with a random configuration of tiles.
     * 
     * Shuffles the tile labels and updates the tiles and controller with the new arrangement.
     */
    private void initializeBoard() {
        // Generate a random permutation of [1, 9]
        List<Integer> randomLabels = new ArrayList<>();
        for (int i = 1; i <= 9; i++) {
            randomLabels.add(i);
        }
        Collections.shuffle(randomLabels);

        // Fire the restart update event to notify the tiles
        pcs.firePropertyChange("restart", null, randomLabels);
        
        // Calculate the new hole position
        int newHolePosition = randomLabels.indexOf(9) + 1;

        // Fire the holePosition update event to notify the controller
        pcs.firePropertyChange("restartHole", null, newHolePosition);
    }

    /**
     * Attempts to flip the board by swapping the labels of tiles in positions 1 and 2.
     * 
     * Checks if flipping is allowed, and if so, performs the flip and notifies the tiles of the change.
     * 
     * @throws PropertyVetoException If the flip is not allowed based on the current tiles position.
     */
    private void flipBoard() {
        try {
            // Check if flipping is allowed by firing a vetoable change event
            vcs.fireVetoableChange("flip", null, null);

            // If allowed, switch the labels of tiles in position 1 and 2
            int label1 = Integer.parseInt(tiles[0].getLabel());
            int label2 = Integer.parseInt(tiles[1].getLabel());

            // Fire a property change event to swap the labels
            pcs.firePropertyChange("flip", label1, label2);
        }
        catch (PropertyVetoException e) {
            // Flip not allowed
            //System.out.println(e.getMessage());
        }
    }
    
    /**
     * Sets the adjacent tiles for each tile based on their positions on a 3x3 grid.
     * 
     * Defines which tiles are adjacent to each tile, allowing them to interact appropriately.
     * Adjacent tiles will be subscribed to listen for firePropertyChange events.
     */
    private void setAdjacencies() {
        tiles[0].setAdjacentTiles(Arrays.asList(tiles[1], tiles[3]));     // Tile 1
        tiles[1].setAdjacentTiles(Arrays.asList(tiles[0], tiles[2], tiles[4])); // Tile 2
        tiles[2].setAdjacentTiles(Arrays.asList(tiles[1], tiles[5]));     // Tile 3
        tiles[3].setAdjacentTiles(Arrays.asList(tiles[0], tiles[4], tiles[6])); // Tile 4
        tiles[4].setAdjacentTiles(Arrays.asList(tiles[1], tiles[3], tiles[5], tiles[7])); // Tile 5
        tiles[5].setAdjacentTiles(Arrays.asList(tiles[2], tiles[4], tiles[8])); // Tile 6
        tiles[6].setAdjacentTiles(Arrays.asList(tiles[3], tiles[7]));     // Tile 7
        tiles[7].setAdjacentTiles(Arrays.asList(tiles[4], tiles[6], tiles[8])); // Tile 8
        tiles[8].setAdjacentTiles(Arrays.asList(tiles[5], tiles[7]));     // Tile 9
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Flip;
    private javax.swing.JButton Restart;
    private com.mycompany.theeightpuzzle.EightController eightController1;
    private com.mycompany.theeightpuzzle.EightTile eightTile1;
    private com.mycompany.theeightpuzzle.EightTile eightTile2;
    private com.mycompany.theeightpuzzle.EightTile eightTile3;
    private com.mycompany.theeightpuzzle.EightTile eightTile4;
    private com.mycompany.theeightpuzzle.EightTile eightTile5;
    private com.mycompany.theeightpuzzle.EightTile eightTile6;
    private com.mycompany.theeightpuzzle.EightTile eightTile7;
    private com.mycompany.theeightpuzzle.EightTile eightTile8;
    private com.mycompany.theeightpuzzle.EightTile eightTile9;
    // End of variables declaration//GEN-END:variables
}
